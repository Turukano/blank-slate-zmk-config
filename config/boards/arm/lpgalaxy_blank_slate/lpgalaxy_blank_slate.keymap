#include "helper.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1
#define ___ &trans

#define DEF         0
#define SHIF        1
#define NAV         2 
#define NUM         3
#define STRG        4
#define NAVSHIF     5
#define NUMSHIF     6  
#define STRGSHIF    7 

#include "german.dtsi"
#include "functions.dtsi"
#include "combos.dtsi" //muss nach den layerdefs sein
//#include "layer_two.dtsi"

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform = &ortho_transform;
    };
 
    behaviors {
        ht: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        plus_grad: plus_grad {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&plus>, <&grad>;
        };

        /*mode_keepass: mode_keepass {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&mode>, <&keepass>;
        };*/
    };

    macros {
        selectline: selectline {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp HOME>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp END>
                , <&macro_release &kp LSHFT>
                ;
        };

        selectpara: selectpara {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LC(PG_UP)>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp LC(PG_DN)>
                , <&macro_release &kp LSHFT>
                ;
        };

        acc: acc {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings 
                = <&macro_tap &kp DE_ACUT>
                , <&macro_param_1to1>
            ;
        };
        
        grad: grad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp B>
                /*, <&macro_tap &kp SPACE>
                , <&macro_tap &kp LS(C)>*/
                ;
        };

        plus: plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp A>
                ;
        };

        /*mode: mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp DE_PLUS>
                ;
        };

        keepass: keepass {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LGUI>
                ;
        };*/
  
        hu_odia: hu_odia {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp N0>
                , <&macro_tap &kp N3>
                , <&macro_tap &kp N3>
                , <&macro_tap &kp N7>
                , <&macro_release &kp RALT>
                ;
        };

        hu_cap_odia: hu_cap_odia {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp N0>
                , <&macro_tap &kp N3>
                , <&macro_tap &kp N3>
                , <&macro_tap &kp N6>
                , <&macro_release &kp RALT>
                ;
        };

        hu_udia: hu_udia {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp N0>
                , <&macro_tap &kp N3>
                , <&macro_tap &kp N6>
                , <&macro_tap &kp N9>
                , <&macro_release &kp RALT>
                ;
        };

        hu_cap_udia: hu_cap_udia {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp N0>
                , <&macro_tap &kp N3>
                , <&macro_tap &kp N6>
                , <&macro_tap &kp N8>
                , <&macro_release &kp RALT>
                ;
        }; 

        kennel: kennel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp K &kp E &kp N &kp N &kp E &kp L>
                , <&macro_press &kp RALT>
                , <&macro_tap &kp Q>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp P &kp O &kp S &kp T &kp E &kp O &kp DOT &kp D &kp E>
                ;
        }; 
    };                  

    keymap {
        compatible = "zmk,keymap";

        def_layer {
            label = "DEF";
            bindings = <
&kp J &ht W D &kp U &kp A &kp X ___ ___ &ht DE_LBKT P &ht DE_LPAR H &ht DE_FSLH H &ht DE_RPAR M &ht DE_RBKT G
&lt STRG C &lt NAV T &lt NUM I &ht LGUI E &kp O ___ ___ &ht DE_QUES DE_Y &kp N &ht DE_ACUT R &ht DE_SS S &lt STRG ENTER
&kp F &kp V &kp DE_UDIA &kp DE_ADIA &kp DE_ODIA ___ ___ &kp DE_Y &ht DE_AT DE_Z &sl SHIF &kp DE_COMM &ht Q K
___ ___ ___ ___ &sl SHIF &ht DE_EXCL DE_DOT &kp BSPC &lt NAV SPACE ___ ___ ___ ___
//als holdtap noch kennel@posteo.de SÃ¤chsische Str. 36, ... smilies, programmstarts: keepass, 
            >;
        };

        shif_layer {
            label = "SHIF";
            bindings = <
&kp LS(J) &ht LS(W) LS(D) &kp LS(U) &kp LS(A) &kp LS(X) ___ ___ &ht DE_LABK LS(P) &ht DE_LBRC LS(H) &ht DE_BSLH LS(L) &ht DE_RBRC LS(M) &ht DE_RABK LS(G)
&kp LS(C)  &kp LS(T) &kp LS(I) &kp LS(E)  &kp LS(O) ___ ___ &kp LS(B) &kp LS(N) &kp LS(R)  &kp LS(S) &ht LC(ENTER) LS(ENTER)
&kp LS(F) &kp LS(V) &kp LS(DE_UDIA) &kp LS(DE_ADIA) &kp LS(DE_ODIA) ___ ___ &kp LS(DE_Y) &kp LS(DE_Z) &ht DE_UNDS DE_MINS &kp DE_SEMI &ht LS(Q) LS(K)
___ ___ ___ ___ &kp DE_DQT &kp DE_COLN &kp LC(BSPC) &kp SPACE ___ ___ ___ ___
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
___ ___ ___ ___ ___ ___ ___ &ht LC(LA(F)) LC(P) &kp LC(LEFT) &kp UP &kp LC(RIGHT) &ht LA(F4) DEL
___ ___ ___ ___ ___ ___ ___ &ht LC(PG_UP) HOME &kp  LEFT &kp DOWN &kp RIGHT &ht LC(PG_DN) END
___ ___ ___ ___ ___ ___ ___ ___ &ht LC(X) LC(C)  &ht LG(TAB) LA(TAB) &ht K_APP LC(V) ___
___ ___ ___ ___ &sl NAVSHIF ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
___ ___ ___ ___ ___ ___ ___ &ht DE_LBKT DE_EXCL &ht DE_LPAR N6 &ht DE_FSLH N7 &ht DE_RPAR N8 &ht DE_RBKT N9
___ ___ ___ ___ ___ ___ ___  &ht DE_CIRC DE_STAR &ht DE_EURO N2 &ht DE_PERC N3 &ht DE_EQL N4 &ht ENTER N5
___ ___ ___ ___ ___ ___ ___ &ht DE_DEG DE_PLUS &ht DE_SECT N1 &ht DE_UNDS DE_MINS &kp DE_COMM &ht DE_HASH N0
___ ___ ___ ___ &sl NUMSHIF ___ &kp BSPC &kp SPACE ___ ___ ___ ___ 
            >;
        };

        strg_layer {
            label = "STRG";
            bindings = <
___ ___ &acc U &acc A ___ ___ ___ &ht FN_FFGOFORTH FN_REDO	&kp LS(TAB)	&ht LG(UP) PG_UP	&kp TAB	&ht FN_FFRECOV FN_FFXTAB
___ &ht LG(LS(T)) LG(LS(S)) &acc I &acc E &acc O ___ ___ &ht FN_FFGOBACK FN_UNDO	&ht LG(LEFT) FN_FFLEFT	&ht LG(D) PG_DN	&ht LG(RIGHT) FN_FFRIGHT	&kp ENTER
___ ___ &hu_udia ___ &hu_odia ___ ___ ___	&ht LC(LS(P)) FN_FFNTAB	&sl STRGSHIF	&ht F5 LC(L)	&kennel
___ ___ ___ ___ &sl STRGSHIF ___ &kp LC(BSPC) ___ ___ ___ ___ ___ 
            >;
        };

        navshif_layer {
            label = "NAVSHIF";
            bindings = <
___ ___ ___ ___ ___ ___ ___ &kp LC(A) &kp LC(LS(LEFT)) &kp LS(UP) &kp LC(LS(RIGHT)) &ht LA(F4) DEL
___ ___ ___ ___ ___ ___ ___ &selectpara &kp  LS(LEFT) &kp LS(DOWN) &kp LS(RIGHT) &selectline
___ ___ ___ ___ ___ ___ ___ ___ &ht LC(L) LC(B) &ht LC(J) LC(U) &ht LC(R) LC(I) ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        numshif_layer {
            label = "NUMSHIF";
            bindings = <
___ ___ ___ ___ ___ ___ ___ &ht DE_LABK PAUSE_BREAK &ht DE_LBRC  PAUSE_BREAK &ht DE_BSLH  PAUSE_BREAK &ht DE_RBRC  PAUSE_BREAK &ht DE_RABK PAUSE_BREAK
___ ___ ___ ___ ___ ___ ___ ___	&kp DE_DLR	___	&kp DE_TILD	&ht LC(ENTER) LS(ENTER)
___ ___ ___ ___ ___ ___ ___ ___ ___	&ht DE_UNDS DE_MINS	&kp DE_SEMI ___
___ ___ ___ ___ ___ ___ &kp LC(BSPC) &kp SPACE ___ ___ ___ ___ 
            >;
        };

        strgshif_layer {
            label = "STRGSHIF";
            bindings = <
___ ___ &acc LS(U) &acc LS(A) ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ &acc LS(I) &acc LS(E) &acc LS(O) ___ ___ ___ ___ ___ ___ ___ 
___ ___ &hu_cap_udia ___ &hu_cap_odia ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___
            >;
        };


    };
};

