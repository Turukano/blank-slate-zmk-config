#include "helper.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1
#define ___ &trans

#define DEF         0
#define SHIF        1
#define NAV         2 
#define NUM         3
#define STRG        4

#include "german.dtsi"
#include "functions.dtsi"
#include "combos.dtsi" //muss nach den layerdefs sein
//#include "layer_two.dtsi"

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

#define acc(keycode) &as keycode keycode

/ {
    chosen {
       zmk,matrix_transform = &ortho_transform;
    };
 
    behaviors {
        ht: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def_layer {
            label = "DEF";
            bindings = <
&kp J &ht W D &kp U &kp A &kp X ___ ___ &ht DE_LBKT P	&ht DE_LPAR H	&ht DE_FSLH H	&ht DE_RPAR M	&ht DE_RBKT G
&lt STRG C	&lt NAV T	&lt NUM I	&kp E	&kp O	___	___	&ht DE_QUES DE_Y	&kp N	&ht DE_ACUT R	&ht DE_SS S	&lt STRG ENTER
&kp F	&kp V	&kp DE_UDIA	&kp DE_ADIA	&kp DE_ODIA	___	___	&kp DE_Y	&ht DE_AT DE_Z	&sl SHIF	&kp DE_COMM	&ht Q K
___	___	___	___	&sl SHIF	&ht DE_EXCL DE_DOT	&kp BSPC	&lt NAV SPACE	___	___	___	___
//als holdtap noch kennel@posteo.de SÃ¤chsische Str. 36, ...
            >;
        };

        shif_layer {
            label = "SHIF";
            bindings = <
/*&kp S(J)	&ht S(W) S(D)	&kp S(U)	&kp S(A)	&kp S(X)	___	___	&ht DE_LABK S(P)	&ht DE_LBRC S(H)	&ht DE_BSLH S(L)	&ht DE_RBRC S(M)	&ht DE_RABK S(G)
&kp S(C) 	&kp S(T)	&kp S(I)	&kp S(E) 	&kp S(O)	___	___	&kp S(B)	&kp S(N)	&kp S(R) 	&kp S(S)	&ht C(ENTER) S(ENTER)
&kp S(F)	&kp S(V)	&kp S(DE_UDIA)	&kp S(DE_ADIA)	&kp S(DE_ODIA)	___	___	&kp S(DE_Y)	&kp S(DE_Z)	&ht DE_UNDS DE_MINS	&kp DE_SEMI	&ht S(Q) S(K)
___	___	___	___	&kp DE_DQT	&kp DE_COLN	&kp C(BSPC)	&kp SPACE	___	___	___	___*/
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        strg_layer {
            label = "STRG";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };


    };
};

