#include "helper.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1
#define ___ &trans

#define DEF         0
#define SHIF        1
#define NAV         2 
#define NUM         3
#define STRG        4

#include "german.dtsi"
#include "functions.dtsi"
#include "combos.dtsi" //muss nach den layerdefs sein
//#include "layer_two.dtsi"

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform = &ortho_transform;
    };
 
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	    };
    };

    behaviors {
        ht: holdtap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

       /* accent: accent {
            compatible = "zmk,behavior-hold-tap";
            label = "accent";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&accented>;
        };*/
    };

    macros {
        /*accented: accented {   
            label = "accented"; 
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp DE_SQT &kp>;
        };*/
    };

    keymap {
        compatible = "zmk,keymap";

        def_layer {
            label = "DEF";
            bindings = <
&ht A B ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        shif_layer {
            label = "SHIF";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };

        strg_layer {
            label = "STRG";
            bindings = <
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
            >;
        };


    };
};

